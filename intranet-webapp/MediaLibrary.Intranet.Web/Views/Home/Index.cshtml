@model MediaLibrary.Intranet.Web.Models.SearchData
@using MediaLibrary.Intranet.Web.Extensions;
@using Microsoft.AspNetCore.Routing;
@inject IJsonHelper Json;

@{
    ViewData["Title"] = "Home Page";

    var parms = new RouteValueDictionary()
    {
        { "searchtext", Model.SearchText },
        { "locationfilter", Model.LocationFilter },
        { "tagfilter", Model.TagFilter },
        { "spatialfilter", Model.SpatialFilter },
        { "layout", Model.Layout },
        { "page", Model.Page }
    };
}

@section Styles {
    <link rel="stylesheet" href="~/css/media.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
}

<div class="row">
    <div class="col-md-3 d-flex flex-column filter-sidebar" style="position: sticky;max-height: calc(100vh - 4.5rem);top: 3.5rem;">
        <form id="filter-form" asp-controller="Home" asp-action="Index" method="get">
            <input type="hidden" asp-for="SearchText" form="filter-form">
            <input type="hidden" asp-for="Layout" form="filter-form">
        </form>
        <h5 class="ooo mt-3">
            Filters
            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-filter" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"/>
            </svg>
        </h5>
        <div class="flex-shrink overflow-auto">
            <div class="form-group">
                <label class="filter-heading" asp-for="SpatialFilter">Planning Area</label>
                <select class="custom-select custom-select-sm" asp-for="SpatialFilter" asp-items="new SelectList(Model.SpatialCategories)" form="filter-form" autocomplete="off">
                    <option value="">&mdash; ALL &mdash;</option>
                </select>
            </div>

            @{List<string> locations2 = Model.ResultList.Facets["LocationName"].Select(x => x.Value.ToString()).ToList();}
            <div class="form-group">
                <label class="filter-heading" asp-for="SpatialFilter">Locations</label>
                <ul class="list-unstyled">
                @for (var i = 0; i < locations2.Count; i++)
                {
                    var facetLink = $"{locations2[i]} ({Model.ResultList.Facets["LocationName"][i].Count})";
                    var facetId = $"location-{i}";
                    var facetChecked = Model.LocationFilter?.Contains(locations2[i]);
                    <li class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" name="LocationFilter" value="@locations2[i]" id="@facetId" checked="@facetChecked" form="filter-form" autocomplete="off">
                        <label class="custom-control-label w-100" for="@facetId">@facetLink</label>
                    </li>
                }
                </ul>
            </div>

            @{List<string> tags2 = Model.ResultList.Facets["Tag"].Select(x => x.Value.ToString()).ToList();}
            <div class="form-group">
                <label class="filter-heading" asp-for="SpatialFilter">Tags</label>
                <ul class="list-unstyled">
                @for (var i = 0; i < tags2.Count; i++)
                {
                    var facetLink = $"{tags2[i]} ({Model.ResultList.Facets["Tag"][i].Count})";
                    var facetId = $"tag-{i}";
                    var facetChecked = Model.TagFilter?.Contains(tags2[i]);
                    <li class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" name="TagFilter" value="@tags2[i]" id="@facetId" checked="@facetChecked" form="filter-form" autocomplete="off">
                        <label class="custom-control-label w-100" for="@facetId">@facetLink</label>
                    </li>
                }
                </ul>
            </div>
        </div>
        <div class="mt-2 text-right">
            <button class="btn btn-theme btn-sm disabled" type="submit" form="filter-form">Apply</button>
            <a class="btn btn-link btn-sm" href="@Url.Action("Index", "Home", new { searchtext = Model.SearchText, layout = Model.Layout }, null)" role="button">Reset</a>
        </div>
    </div>
    <div class="col-md-9">
        <form id="searchform" asp-controller="Home" asp-action="Index" method="get"></form>
        <div class="input-group mt-3">
            <input asp-for="SearchText" form="searchform" class="form-control border border-right-0" placeholder="Search..." autocomplete="off">
            <span class="input-group-append">
                <button class="btn btn-theme border-left-0" type="button">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-search" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z"/>
                        <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"/>
                    </svg>
                </button>
            </span>
        </div>

        <div class="results-count d-flex flex-no-wrap justify-content-between align-items-center my-3">
            <span class="d-block">@Html.DisplayFor(m => m.ResultList.Count) results</span>
            <div>
                <span class="mr-1">Layout:</span>
                <div class="btn-group">
                    <a href="@Url.Action("Index", "Home", parms.Combine(new RouteValueDictionary() {{ "layout", DisplayMode.List }}))" class="btn btn-sm btn-outline-theme @(@Model.Layout == DisplayMode.List ? "active" : "")" role="button" data-toggle="tooltip" data-placement="bottom" title="View in list layout">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-view-list" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="View in list layout">
                            <path fill-rule="evenodd" d="M3 4.5h10a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H3zM1 2a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 2zm0 12a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 14z"/>
                        </svg>
                    </a>
                    <a href="@Url.Action("Index", "Home", parms.Combine(new RouteValueDictionary() {{ "layout", DisplayMode.Map }}))" class="btn btn-sm btn-outline-theme @(@Model.Layout == DisplayMode.Map ? "active" : "")" role="button" data-toggle="tooltip" data-placement="bottom" title="View in map layout">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-map" fill="currentColor" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="View in map layout">
                            <path fill-rule="evenodd" d="M15.817.113A.5.5 0 0 1 16 .5v14a.5.5 0 0 1-.402.49l-5 1a.502.502 0 0 1-.196 0L5.5 15.01l-4.902.98A.5.5 0 0 1 0 15.5v-14a.5.5 0 0 1 .402-.49l5-1a.5.5 0 0 1 .196 0L10.5.99l4.902-.98a.5.5 0 0 1 .415.103zM10 1.91l-4-.8v12.98l4 .8V1.91zm1 12.98l4-.8V1.11l-4 .8v12.98zm-6-.8V1.11l-4 .8v12.98l4-.8z"></path>
                        </svg>
                    </a>
                </div>
            </div>
        </div>
        <div>
        @if (Model.Layout == DisplayMode.Map)
        {
            <div id="map"></div>
        }
        else
        {
            @for (var i = 0; i < Model.ResultList.Results.Count; i++)
            {
                string tag = string.Join(", ", Model.ResultList.Results[i].Document.Tag);
                string imgSrc = "/api/assets/" + System.IO.Path.GetFileName(new Uri(Model.ResultList.Results[i].Document.FileURL).AbsolutePath);
                string detailUrl = Url.Action("Item", "Gallery", new { id = System.IO.Path.GetFileNameWithoutExtension(Model.ResultList.Results[i].Document.MetadataStorageName) });

                string fullDescription = Model.ResultList.Results[i].Document.Project;
                fullDescription += $"\nLocation: {Model.ResultList.Results[i].Document.LocationName}";
                fullDescription += $"\nTags: {tag}";

                // Display the hotel name and description.
                @* @Html.TextAreaFor(m => Model.ResultList.Results[i].Document.Name, new { @class = "box1" })
                @Html.TextArea($"desc{i}", fullDescription, new { @class = "box2" }) *@
                <div class="media p-3 my-3 border rounded bg-light">
                <a href="@detailUrl"><img src="@imgSrc" class="mr-3" style="max-width: 150px;" alt="..."></a>
                <div class="media-body">
                    <h5 class="mt-0"><a href="@detailUrl">@Model.ResultList.Results[i].Document.Name</a></h5>
                    <p class="mb-0">Location: @Model.ResultList.Results[i].Document.LocationName</p>
                    <p class="mb-0">Tags: @tag</p>
                </div>
                </div>
            }
        }
        </div>
        @if (Model != null && Model.PageCount > 1)
        {
        // If there is more than one page of results, show the paging buttons.
        <div class="text-center">
            <ul class="list-inline">
                @if (Model.CurrentPage > 0)
                {
                    <li class="list-inline-item">
                        @Html.ActionLink("|<", "Index", "Home", parms.Combine(new RouteValueDictionary() {{ "page", 0 }}), null)
                    </li>
                }
                else
                {
                    <li class="list-inline-item">|&lt;</li>
                }

                @if (Model.CurrentPage > 0)
                {
                    <li class="list-inline-item">
                        @Html.ActionLink("<", "Index", "Home", parms.Combine(new RouteValueDictionary() {{ "page", Model.CurrentPage - 1 }}), null)
                    </li>
                }
                else
                {
                    <li class="list-inline-item">&lt;</li>
                }

                @for (var pn = Model.LeftMostPage; pn < Model.LeftMostPage + Model.PageRange; pn++)
                {
                    @if (Model.CurrentPage == pn)
                    {
                        // Convert displayed page numbers to 1-based and not 0-based.
                        <li class="list-inline-item font-weight-bold">@(pn + 1)</li>
                    }
                    else
                    {
                        <li class="list-inline-item">
                            @Html.ActionLink((pn + 1).ToString(), "Index", "Home", parms.Combine(new RouteValueDictionary() {{ "page", pn }}), null)
                        </li>
                    }
                }

                @if (Model.CurrentPage < Model.PageCount - 1)
                {
                    <li class="list-inline-item">
                        @Html.ActionLink(">", "Index", "Home", parms.Combine(new RouteValueDictionary() {{ "page", Model.CurrentPage + 1 }}), null)
                    </li>
                }
                else
                {
                    <li class="list-inline-item">&gt;</li>
                }

                @if (Model.CurrentPage < Model.PageCount - 1)
                {
                    <li class="list-inline-item">
                        @Html.ActionLink(">|", "Index", "Home", parms.Combine(new RouteValueDictionary() {{ "page", Model.PageCount - 1 }}), null)
                    </li>
                }
                else
                {
                    <li class="list-inline-item">&gt;|</li>
                }
            </ul>
        </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <script>
        var filterInputs = document.querySelectorAll('.filter-sidebar input, .filter-sidebar select');
        var filterApplyBtn = document.querySelector('.filter-sidebar button');
        Array.prototype.forEach.call(filterInputs, function (element) {
            element.addEventListener('change', (e) => {
                filterApplyBtn.classList.remove('disabled');
            });
        });

        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        });
    </script>
    @if (Model.Layout == DisplayMode.Map)
    {
    <text>
    <script>
        document.querySelector('#SpatialFilter').addEventListener('change', event => {
            location = '@Url.Action("Facet", "Home")?spatialFilter=' + event.target.value;
        });

        if (document.querySelector('#map')) {
            // Set up map
            let center = L.bounds([1.56073, 104.11475], [1.16, 103.502]).getCenter();
            let map = L.map('map').setView([center.x, center.y], 12);

            let basemap = L.tileLayer('https://maps-{s}.onemap.sg/v3/Grey/{z}/{x}/{y}.png', {
                detectRetina: true,
                maxZoom: 18,
                minZoom: 11,
                attribution: '<img src="https://docs.onemap.sg/maps/images/oneMap64-01.png" style="height:20px;width:20px;"/> New OneMap | Map data &copy; contributors, <a href="http://SLA.gov.sg">Singapore Land Authority</a>'
            });

            map.setMaxBounds([[1.56073, 104.1147], [1.16, 103.502]]);

            basemap.addTo(map);

            // Search results
            let results = [
            @foreach (var item in Model.ResultList.Results) {
                @:[@Json.Serialize(@item.Document.Location.Latitude),@Json.Serialize(@item.Document.Location.Longitude),@Json.Serialize(item.Document.Name),@Json.Serialize(Url.Action("Item", "Gallery", new { id = System.IO.Path.GetFileNameWithoutExtension(item.Document.MetadataStorageName) })),@Json.Serialize("/api/assets/" + System.IO.Path.GetFileName(new Uri(item.Document.FileURL).AbsolutePath))],
            }
            ];

            // Create markers
            let markers = L.markerClusterGroup();
            for (let result of results) {
                markers.addLayer(createMarker(...result));
            }
            map.addLayer(markers);

            // Make sure popups are sized properly
            document.querySelector('.leaflet-popup-pane').addEventListener('load', event => {
                let tagName = event.target.tagName,
                    popup = map._popup;
                if (tagName === 'IMG' && popup && !popup._updated) {
                    popup._updated = true;
                    popup.update();
                }
            }, true);
        }

        function createMarker(lat, lng, title, url, img) {
            let marker = L.circleMarker(L.latLng(lat, lng), {
                radius: 5,
                color: '#333333',
                fillColor: '#004DA8',
                weight: 1,
                opacity: 1,
                fillOpacity: 0.8
            });
            marker.bindPopup(`<a href="${url}" alt="${title}"><img class="popup-img" src="${img}" /></a>`);
            return marker;
        }
    </script>
    </text>
    }
}
